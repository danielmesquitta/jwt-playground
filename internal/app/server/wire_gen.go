// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package server

import (
	"github.com/danielmesquitta/jwt-playground/internal/app/server/handler"
	"github.com/danielmesquitta/jwt-playground/internal/app/server/middleware"
	"github.com/danielmesquitta/jwt-playground/internal/app/server/router"
	"github.com/danielmesquitta/jwt-playground/internal/config/env"
	"github.com/danielmesquitta/jwt-playground/internal/domain/usecase"
	"github.com/danielmesquitta/jwt-playground/internal/pkg/jwtutil"
	"github.com/danielmesquitta/jwt-playground/internal/pkg/validator"
	"github.com/danielmesquitta/jwt-playground/internal/provider/cache/redis"
)

// Injectors from wire.go:

func New() *Server {
	validation := validator.New()
	envEnv := env.NewEnv(validation)
	jwtUtil := jwtutil.NewJWTUtil(envEnv)
	middlewareMiddleware := middleware.NewMiddleware(jwtUtil)
	redisRedis := redis.NewRedis(envEnv)
	signInUseCase := usecase.NewSignInUseCase(envEnv, redisRedis, jwtUtil)
	refreshUseCase := usecase.NewRefreshUseCase(redisRedis, envEnv, jwtUtil)
	authHandler := handler.NewAuthHandler(envEnv, signInUseCase, refreshUseCase)
	userHandler := handler.NewUserHandler()
	routerRouter := router.NewRouter(middlewareMiddleware, authHandler, userHandler)
	server := newServer(envEnv, routerRouter)
	return server
}
